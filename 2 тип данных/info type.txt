переменные это контейнер, а у каждого контейнера есть размер и в этот контейнер можно закинуть данные по его размеру или меньше 
и так как js строго не привязан к размеру, то у тебя может быть тип слон, а через час ты туда засунешь ещё какой нибудь тип
типы данных:
    1 тип
        number - целое число
        ltcznbxyst 
        nan - является ошибкой расчетов, например alert( "не число" / 2 ); // NaN, такое деление является ошибкой, Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN
        infinity - бесконечность
    2 тип
        bigInt - можно загрузить очень большие чила
    3 тип
        string - let myNameIs = 'Bond'; let myNameIs = '11Bond'
        \n - enter
        \' - можно использовать для двойных ковычек в тексте let myNameIs = "Bond \'James\' Bond" = Bond 'James' Bond
        \" - то же самое, только наоборот let myNameIs = 'Bond \"James\" Bond' = Bond "James" Bond
        \\ - разделитель текста слэшем let text = "like\\dislike" = like\dislike, с
                                ответственно "like\\\dislike" = like\\dislike 
                                           и "like\\\\dislike" = like\\\dislike и так далее 
    \t = табуляция
    4 тип
        boolean 
        let like = false';
        let like = true;
    5 тип 
        null - пустое значение, или когда неизвестно значение
        undefined - у переменной нет значения
    6 тип 
        object - представление любого предмета, например экран ПК
        let monitor = {
            name: "Samsung",
            weight: 2.2,
            resolution: 27,
            price: 350,
            rotate: false
        };
    7 тип 
    sumbol - для создания уникальных значений  
        let unique = new Symbol();
    8 тип
    massive - бывают одномерные, двумерные, трёхмерные и тд
        одномерный массив let n = ['val1', 'val2', 'val3'] строка со значениями, где под каждое значение выделена своя ячейка 
            для доступа к значению внутри массива нужно использовать n[0] где 0 это индекс (порядковый номер ячейки которую хотим вытянуть), индекс начинается с нуля
        задание let arr = ['string', 20, 38.5, NaN, undefined, null, true,{}]

        двумерный массив - выглядит как таблица умножения, выглядит как одномерный массив в который положили в другой одномерный массив несколько раз, количество строк и калонок может быть любым
        например let arr = [[1, 2, 3],[4, 5, 6]] - для того чтобы получить нужное нам массив нужно указать индекс arr[0], а чтобы обратиться к значению вложенному в массив arr[0][0]

        трёхмерный массив - принцип работы как у двумерного
        let arr = [[[1, 2], [3, 4]], [[5, 6], [7,8]], [[9, 10], [11, 12]]]
        для нахождения в таком массиве нужного значения нужно брать 3 индекса, например arr[0][0][1] = 2